# This workflow will build a Swift project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

name: Swift

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      matrix:
        xcode-version: [
          '15'
        ]

    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v4
    - uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ matrix.xcode-version }}
    - uses: jdx/mise-action@v2

    - name: Setup host app using tuist
      run: sh generate_project.sh
      working-directory: ./HostApp

    - name: Test macOS
      run: sh test_project.sh 'platform=macOS,name=Any Mac'
      working-directory: ./HostApp

    - name: Test macOS (Mac Catalyst)
      run: sh test_project.sh 'platform=macOS,varint=Mac Catalyst,name=Any Mac'
      working-directory: ./HostApp

    - name: Test iOS
      run: sh test_project.sh 'platform=iOS Simulator,name=Any iOS Simulator Device'
      working-directory: ./HostApp

    - name: Test tvOS
      run: sh test_project.sh 'platform=tvOS Simulator,name=Any tvOS Simulator Device'
      working-directory: ./HostApp

    - name: Test watchOS
      run: sh test_project.sh 'platform=watchOS Simulator,name=Any watchOS Simulator Device'
      working-directory: ./HostApp

    - name: Test visionOS
      run: sh test_project.sh 'platform=visionOS Simulator,name=Any visionOS Simulator Device'
      working-directory: ./HostApp

    - uses: kishikawakatsumi/xcresulttool@v1
      with:
        path: HostApp/TestResults.xcresult
        show-passed-tests: false
      if: failure()
